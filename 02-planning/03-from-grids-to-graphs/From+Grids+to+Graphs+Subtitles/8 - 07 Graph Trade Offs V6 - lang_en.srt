1
00:00:00,000 --> 00:00:03,440
At this point, you've solve the planning problem two different ways.

2
00:00:03,440 --> 00:00:06,165
One is by taking the obstacles from a 2D map,

3
00:00:06,165 --> 00:00:07,853
rendering them into a grid,

4
00:00:07,853 --> 00:00:10,330
and then finding a plan extracting waypoints.

5
00:00:10,330 --> 00:00:13,950
And the second method you implemented was to load in the road network,

6
00:00:13,950 --> 00:00:17,987
and use the intersections of the roads as nodes in a graph to find a plan,

7
00:00:17,987 --> 00:00:20,190
and that worked as well.

8
00:00:20,190 --> 00:00:22,680
What's interesting is that the same algorithm, A*,

9
00:00:22,680 --> 00:00:27,270
was able to find paths more or less without modification to the implementation.

10
00:00:27,270 --> 00:00:30,270
One of the nice things about using the road network is that

11
00:00:30,270 --> 00:00:33,905
you can more efficiently find much longer plans.

12
00:00:33,905 --> 00:00:36,030
You also avoided the time and effort of

13
00:00:36,030 --> 00:00:38,715
converting the plan into a set of sparse waypoints.

14
00:00:38,715 --> 00:00:41,860
A road network allows you to make a graph quite easily.

15
00:00:41,860 --> 00:00:45,293
But for flying cars or for any flying robot for that matter,

16
00:00:45,293 --> 00:00:47,900
there's really no need to restrict yourself to roads.

17
00:00:47,900 --> 00:00:52,550
And you can be more creative in thinking about how to assemble a state space graph.

18
00:00:52,550 --> 00:00:54,012
In constructing a graph,

19
00:00:54,012 --> 00:00:56,910
there are a few questions you'd like to consider.

20
00:00:56,910 --> 00:01:00,045
One question that arises is, does the planner complete?

21
00:01:00,045 --> 00:01:02,389
Meaning that if a viable plan exists,

22
00:01:02,389 --> 00:01:04,140
is your planner guaranteed to find it?

23
00:01:04,140 --> 00:01:07,380
Another question to ask would be, is the planner optimal?

24
00:01:07,380 --> 00:01:09,240
Meaning that if you find a plan,

25
00:01:09,240 --> 00:01:13,785
do you have any guarantee that it's the best plan or at least close to an optimal plan?

26
00:01:13,785 --> 00:01:17,310
In using a road network as a graph to plan for a flying car,

27
00:01:17,310 --> 00:01:19,470
you can see that it's entirely possible that

28
00:01:19,470 --> 00:01:22,470
your planner will be neither complete nor optimal.

29
00:01:22,470 --> 00:01:26,550
In fact, the specific representation of your planning problem affects the answer to

30
00:01:26,550 --> 00:01:31,750
these questions much more than the algorithm you use to actually solve the problem.

31
00:01:31,750 --> 00:01:36,020
For example, grids are useful because they preserve the entire geometry of the problem.

32
00:01:36,020 --> 00:01:37,635
If there is a feasible path,

33
00:01:37,635 --> 00:01:41,895
then the plan can be expressed by the grid up to the limits of the grid resolution.

34
00:01:41,895 --> 00:01:43,575
In terms of optimality,

35
00:01:43,575 --> 00:01:46,830
the lowest cost path through a grid is typically going to be pretty

36
00:01:46,830 --> 00:01:50,405
close to the true lowest cost path that the vehicle could fly,

37
00:01:50,405 --> 00:01:52,815
again, limited by the resolution of the grid.

38
00:01:52,815 --> 00:01:57,015
So, modulo resolution limits, a grid-based representation,

39
00:01:57,015 --> 00:01:59,745
is going to be both complete and optimal

40
00:01:59,745 --> 00:02:02,665
because it's expressing the geometry of the problem.

41
00:02:02,665 --> 00:02:04,665
It's expressing where obstacles are,

42
00:02:04,665 --> 00:02:08,245
and giving you the best understanding of what the possible plans are.

43
00:02:08,245 --> 00:02:11,778
The trade-off is that grids are computationally expensive.

44
00:02:11,778 --> 00:02:14,040
Just representing the grid alone grows

45
00:02:14,040 --> 00:02:18,315
exponentially with the number of state variables that you have to keep track of.

46
00:02:18,315 --> 00:02:21,330
As you go from 2D to 3D,

47
00:02:21,330 --> 00:02:24,855
and eventually adding even more dimensions to incorporate

48
00:02:24,855 --> 00:02:28,530
the orientation of the vehicle into the representation of states,

49
00:02:28,530 --> 00:02:31,590
the complexity of the planning problem will grow exponentially.

50
00:02:31,590 --> 00:02:33,045
And what's worse is,

51
00:02:33,045 --> 00:02:36,080
search through a grid is exponential in the length of the plan.

52
00:02:36,080 --> 00:02:39,285
And the length of the plan is going to grow with the resolution.

53
00:02:39,285 --> 00:02:42,030
That means that although grids capture the free part of

54
00:02:42,030 --> 00:02:45,093
the configuration space, they are expensive.

55
00:02:45,093 --> 00:02:47,750
Graphs on the other hand, like that of the road network,

56
00:02:47,750 --> 00:02:50,015
let us represent the topology of the space.

57
00:02:50,015 --> 00:02:51,830
What that funny word means is,

58
00:02:51,830 --> 00:02:54,150
how different states in the space are connected

59
00:02:54,150 --> 00:02:58,110
regardless of the distances involved and the geometry of the space.

60
00:02:58,110 --> 00:03:02,430
We can actually set up a spectrum with grids at one end.

61
00:03:02,430 --> 00:03:04,665
And at the far end of the spectrum away from grids,

62
00:03:04,665 --> 00:03:06,600
we can have totally non-geometric

63
00:03:06,600 --> 00:03:10,390
graphs that only capture which parts of the space are connected.

64
00:03:10,390 --> 00:03:13,095
Such graphs may not capture distances or angles.

65
00:03:13,095 --> 00:03:15,828
But really, if we have a set of states and edges,

66
00:03:15,828 --> 00:03:18,614
that guarantee that you can get from one state to the other.

67
00:03:18,614 --> 00:03:20,970
Then the nice thing about these graphs is they

68
00:03:20,970 --> 00:03:23,565
don't get more complex as we add more dimensions,

69
00:03:23,565 --> 00:03:26,220
like orientation, to the state space.

70
00:03:26,220 --> 00:03:31,850
If we're using these kinds of graphs and as we go from 2D to 3D and at orientation,

71
00:03:31,850 --> 00:03:36,705
we're not going to necessarily incur any additional computational complexity.

72
00:03:36,705 --> 00:03:40,710
Furthermore, a single edge in a non-metric graph can be arbitrarily long,

73
00:03:40,710 --> 00:03:43,160
unlike grids where the length scale of the plan and

74
00:03:43,160 --> 00:03:46,730
the total distances involved really affect the complexity of the search.

75
00:03:46,730 --> 00:03:50,570
If you have a plan that's one edge long and that edge is arbitrarily long,

76
00:03:50,570 --> 00:03:54,280
then that's going to be a very easy planning problem to solve.

77
00:03:54,280 --> 00:03:56,083
And furthermore, with a graph,

78
00:03:56,083 --> 00:04:01,030
the computational complexity of the search process is independent of scale.

79
00:04:01,030 --> 00:04:02,720
The downside to graphs is that you're at

80
00:04:02,720 --> 00:04:05,870
the mercy of how well you chose the nodes or way points.

81
00:04:05,870 --> 00:04:07,250
If you pick way points badly,

82
00:04:07,250 --> 00:04:10,415
and no path through the graph actually gets you from the start to the goal,

83
00:04:10,415 --> 00:04:13,875
then you'll never find a plan even if a feasible plan exists.

84
00:04:13,875 --> 00:04:16,350
So, that's a problem in terms of completeness.

85
00:04:16,350 --> 00:04:18,565
And even if we guarantee completeness,

86
00:04:18,565 --> 00:04:21,185
somehow it might be the case that any path

87
00:04:21,185 --> 00:04:24,800
through the graph is arbitrarily far from the optimal plan.

88
00:04:24,800 --> 00:04:27,500
There are intermediate graph representations that

89
00:04:27,500 --> 00:04:30,493
actually capture distances and locations,

90
00:04:30,493 --> 00:04:33,680
and these typically tend to be the most useful ones in

91
00:04:33,680 --> 00:04:36,965
that a search through a metric graph can be computationally efficient,

92
00:04:36,965 --> 00:04:41,870
but also contain properties that correspond to optimality and completeness.

93
00:04:41,870 --> 00:04:44,000
Then we're going to look at a couple of these next.

